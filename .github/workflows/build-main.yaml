# name: build-main

# on:
#   push:
#     branches:
#       - autoware
#   pull_request:
#     branches:
#       - autoware
# jobs:
#   load-env:
#     uses: ./.github/workflows/load-env.yaml

#   build-main:
#     needs: load-env
#     runs-on: ubuntu-latest
#     container: ${{ needs.load-env.outputs.base-image }}
#     steps:
#       - name: Check out repository
#         uses: actions/checkout@v3

#       - name: Run setup script
#         run: |
#           chmod +x ./setup-dev-env.sh 
#           ./setup-dev-env.sh -y

#       - name: Set git config
#         uses: autowarefoundation/autoware-github-actions/set-git-config@v1
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}

#       - name: Run vcs import
#         run: |
#           mkdir src
#           vcs import src < autoware.repos

#       - name: Run vcs export
#         run: |
#           vcs export --exact src || true

#       - name: Run rosdep install
#         run: |
#           sudo apt-get -y update
#           rosdep update
#           DEBIAN_FRONTEND=noninteractive rosdep install -y --from-paths src --ignore-src --rosdistro ${{ needs.load-env.outputs.rosdistro }}

#       - name: Build
#         run: |
#           . /opt/ros/${{ needs.load-env.outputs.rosdistro }}/setup.sh
#           colcon build --event-handlers console_cohesion+ --cmake-args -DCMAKE_BUILD_TYPE=Release

name: build-main

on:
  push:
    branches:
      - autoware
  pull_request:
    branches:
      - autoware

jobs:
  load-env:
    uses: ./.github/workflows/load-env.yaml

  build-main:
    needs: load-env
    runs-on: ubuntu-latest
    container: ${{ needs.load-env.outputs.base-image }}
    steps:
      - name: Checkout Repository  
        uses: actions/checkout@v3

      - name: Check disk space
        run: |
          df -h
          freeSpace=$(df --output=avail -h / | tail -n1 | sed 's/[^0-9]*//g')
          if [ $freeSpace -lt 5000 ]; then  # 假设您需要至少5GB的空闲空间
            echo "Not enough disk space. Exiting."
            exit 1
          fi

      - name: Cache ROS dependencies
        uses: actions/cache@v2
        with:
          path: /opt/ros
          key: ros-deps-${{ runner.os }}-${{ hashFiles('**/autoware.repos', '**/simulator.repos') }}
          restore-keys: |
            ros-deps-${{ runner.os }}-

      - name: Run Setup Script 
        run: |
          chmod +x ./setup-dev-env.sh 
          ./setup-dev-env.sh -y

      - name: Set Git Config  
        uses: autowarefoundation/autoware-github-actions/set-git-config@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Import Main Repositories  
        run: |
          mkdir src
          vcs import src < autoware.repos

      - name: Import Simulator Repositories  
        run: |
          vcs import src < simulator.repos

      - name: Run VCS Export  
        run: |
          vcs export --exact src || true

      - name: Install ROS Dependencies  
        if: steps.cache-ros-deps.outputs.cache-hit != 'true'
        run: |
          sudo apt-get -y update
          rosdep update
          DEBIAN_FRONTEND=noninteractive rosdep install -y --from-paths src --ignore-src --rosdistro ${{ needs.load-env.outputs.rosdistro }}

      - name: Cache build artifacts
        id: cache-build-artifacts
        uses: actions/cache@v2
        with:
          path: ~/ros2_ws/build
          key: build-artifacts-${{ runner.os }}-${{ hashFiles('**/*.cpp', '**/*.h') }}
          restore-keys: |
            build-artifacts-${{ runner.os }}-

      - name: Build Code  
        if: steps.cache-build-artifacts.outputs.cache-hit != 'true'
        run: |
          . /opt/ros/${{ needs.load-env.outputs.rosdistro }}/setup.sh
          colcon build --event-handlers console_cohesion+ --cmake-args -DCMAKE_BUILD_TYPE=Release

      # - name: Generate Test Configuration  # 生成测试配置文件
      #   run: |
      #     python3 .github/scripts/generate_test_configuration.py

      # - name: Display new_workflow.yaml  # 显示new_workflow.yaml
      #   run: cat test_runner/scenario_test_runner/config/new_workflow.yaml

      # - name: Run Scenario Test  # 运行场景测试
      #   run: |
      #     source /opt/ros/${{ needs.load-env.outputs.rosdistro }}/setup.sh
      #     source install/local_setup.sh
      #     ros2 launch scenario_test_runner scenario_test_runner.launch.py workflow:='/path/to/config/new_workflow.yaml' global_frame_rate:=20
      #     ros2 run scenario_test_runner result_checker.py /tmp/scenario_test_runner/result.junit.xml

